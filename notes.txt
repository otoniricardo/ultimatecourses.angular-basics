commit: [Component Architecture]: Create child feature module
    - how to create a new module using the cli: 
        npx ng g admin --module=app.module
            => npx ng: use angular cli.
            => g: short for generate.
            => admin: module name.
            => --module=app.module: make new module auto import in app module.
    - about the generated module file:
        @NgModule() decorator:
            => declare any component that is used in the module
            => imports CommonModule, whic contains the angular features and
            directives
    
commit: [Component Architecture]: Create a smart container component
    - how to generate a new component:
        npx ng g component admin/containers/donut-list --dry-run
            => admin/containers/donut-list: the path for the new component
            files.
            => --dry-run: show what the command will do but doesnot make any
            changes. Need to run the command again without this flag so the
            component is really generated.
    - need to export the DonutListComponent from the AdminModule

commit: [Component Architecture]: Use the NgOnInit lifecycle Hook
    - use the ngOnInit func to initiate not static data(data that gets fetched);
    - use the | json in the template: {{ donut | json }} in template does the 
    same as JSON.stringfy(donut) in the .ts and {{ donut }} in template;

commit: [Component Architecture]: Type definitions with interfaces
    - how to create a interface with the cli:
        npx ng g interface admin/models/Donut model
            => the [space] model at the end of the command appends .model to the
            name of the file;
    - interfaces dont get compiled to js, its is just a virtual check;

commit: [Component Architecture]: Create and render a dumb component
    - how to generate a dumb component:
        npx ng g component admin/components/donut-card
    - [alt]="donut.name" does the same of alt="{{donut.name}}";

commit: [Component Architecture]: Pass state to dumb components via @Input
    - the srmart component is responsible for data fetching and delegating
    to the dumb component

commit: [Styles and CSS encapsulation]: Scoped styles in components
    - the property inlineStyleLanguage: scss in angular.json allows styles
    compositions like hover inside .donut-card styles in DonutCardComponent;
    -  how to use the :host {} to style a component;

commit: [Styles and CSS encapsulation]: View encapsulation: shadown DOM and emulated
    - ViewEncapsulation.Emulated is the default behaviour;

commit: [Styles and CSS encapsulation]: Set inline styles with style bindings
    - the idea behind inline styles is to switch styles without the need of
    switch classes
    - how to apply conditionals styles using [style.*]:
        [style.border]="donut.promo ? '2px solid #eee' : 'none'"

commit: [Styles and CSS encapsulation]: Complex inline styles with NgStyle
    - [ngStyle] is more powerfull than [style];
    - should be used instead of [style] when is needed to bind more than like 
    2 styles;
    - accepts a function to get an styles object;

commit: [Styles and CSS encapsulation]: Set classes with class bindings
    - woks like inline [style] but with the advantage of not applying an
    empty class on false condition;
    - can be used multiple times;

commit: [Styles and CSS encapsulation]: Complex classes with NgClass
    - should be used instead of [class] when applying 2 or more classes;